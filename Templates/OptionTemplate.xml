<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<!--Requests reference information for supported settings-->
<!--version - version of the settings data scheme-->
<referenceOptions version="1.0.0.0">
  
  <!--General description of the settings that will be displayed in the header of the configuration file-->
  <description/>

  <!--List of settings groups-->
  <optionGroups>
    
    <!--A specific group of settings, there may be more than one-->
    <!--name - unique name of group of settings. Can't be empty-->
    <!--displayName - name of group of settings that is displayed to user. Attribute may be missing, then suggest that displayName = null-->
    <!--description - description of group of settings, which will be displayed before group name. Attribute may be missing, then suggest that description = null-->
    <!--secondDescription - description of group of settings, which will be displayed after group name. Attribute may be missing, then suggest that secondDescription = null-->
    <!--control - name of control, in which you need to reflect the settings of this group. If name is not specified, then generator itself decides how to draw group settings. Attribute may be missing, then suggest that control = null-->
    <optionGroup name="" displayName="" description="" secondDescription="" control="">
      
      <!--Setting included in this group-->
      <!--name - unique name of setting  within the group. Can't be empty-->
      <!--displayName - name of setting that is displayed to user. Attribute may be missing, then suggest that displayName = null-->
      <!--description - description of setting, which will be displayed before the line with setting. Attribute may be missing, then suggest that description = null-->
      <!--defaultValue - default value. Attribute may be missing, then suggest that defaultValue = null. Взаимоисключающий атрибут с fileDefaultValue-->
      <!--fileDefaultValue - default value, readable from the file with the specified name. Attribute may be missing, then suggest that fileDefaultValue отсутствует. Взаимоисключающий атрибут с defaultValue-->
      <!--valueType - setting type value
      Valid values:
            String = 0,
            Byte = 1,
            Int16 = 2,
            UInt16 = 3,
            Int32 = 4,
            UInt32 = 5,
            Int64 = 6,
            UInt64 = 7,
            Guid = 8,
            Bool = 9,
            Decimal = 10,
            DateTime = 11,
            Date = 12,
            Time = 13,
            TimeSpan = 14,
            NullableByte = 15,
            NullableInt16 = 16,
            NullableUInt16 = 17,
            NullableInt32 = 18,
            NullableUInt32 = 19,
            NullableInt64 = 20,
            NullableUInt64 = 21,
            NullableGuid = 22,
            NullableBool = 23,
            NullableDecimal = 24,
            NullableDateTime = 25,
            NullableDate = 26,
            NullableTime = 27,
            NullableTimeSpan = 28,
            ByteArray = 29
            Attribute may be missing, then suggest that valueType = String, in the attribute value, you can specify both the code or the string literal corresponding to this code
      -->
      <!--control - name of the control, in which it is necessary to display that setting. If name is not specified, then generator itself decides which control to use. If specified group control, then setting controls are taken into account only if the generator does not know how to draw group control. Attribute may be missing, then suggest that control = null-->
      <option name="" displayName="" description="" defaultValue="" fileDefaultValue="" valueType="" control="">
        <!--Blocks going further must either be absent or one of them must be present.-->

        <!--Setting is range-->
        <!--min - minimum setting value. Attribute may be missing, then suggest that minimum value equals default(T)-->
        <!--max - maximum setting value. Attribute may be missing, then suggest that maximum value equals default(T)-->
        <rangedMinMax min="" max=""/>

        <!--Setting is range, which has no bottom limit-->
        <!--max - maximum setting value. Attribute may be missing, then suggest that maximum value equals default(T)-->
        <rangedMax max=""/>

        <!--Setting is range, which has no top limit-->
        <!--min - minimum setting value. Attribute may be missing, then suggest that minimum value equals default(T)-->
        <rangedMin min="" />

        <!--Setting is a selectable value from the list-->
        <fixedList>
          <!--List item-->
          <!--value - item value. Attribute may be missing, then suggest that value = null-->
          <!--displayValue - value in state displayed to user. Attribute may be missing, then suggest that displayValue = value-->
          <listItem value="" displayValue=""/>
        </fixedList>

        <!--Setting is a selectable value from the list, where list is obtained by sql-query-->
        <!--query - request, after which you can get a list of two fields in the line. Attribute can't be null-->
        <!--valueFieldName - name of the field from which to take values ​​for the keys of list items. Attribute may be missing, then suggest that valueFieldName = "value"-->
        <!--displayValueFieldName - name of the field from which to take values ​​for display in the list. Attribute may be missing, then suggest that displayValueFieldName = "displayValue"-->
        <sqlFixedList query="" valueFieldName="" displayValueFieldName=""/>

        <!--Setting is a selectable set of flags from the list, where list is formed by powers of two, and choice result is a flag final value, that is a combination of chosen flags. Makes sense only for numeric types-->
        <flagList>
          <!--List item-->
          <!--value - flag value. Attribute may be missing, then suggest that value = 0-->
          <!--displayValue - value in state displayed to user. Attribute may be missing, then suggest that displayValue = value-->
          <listItem value="" displayValue=""/>
        </flagList>

        <!--Setting is a selectable set of flags from the list, where list is obtained by sql-query and formed by powers of two, and choice result is a flag final value, that is a combination of chosen flags. Makes sense only for numeric types-->
        <!--query - request, after which you can get a list of two fields in the line. Attribute can't be null-->
        <!--valueFieldName - name of the field from which to take values ​​for the keys of list items. Attribute may be missing, then suggest that valueFieldName = "value"-->
        <!--displayValueFieldName - name of the field from which to take values ​​for display in the list. Attribute may be missing, then suggest that displayValueFieldName = "displayValue"-->
        <sqlFlagList query="" valueFieldName="" displayValueFieldName=""/>

        <!--Setting is a list, in which the multiple choice of elements is possible. Makes sense only for string type-->
        <!--sorted - whether or not to take into account the order, in which user choosed elements. Valid values: True, 1, False, 0. Attribute may be missing, then suggest that sorted = "False"-->
        <!--separator - key separator in the result string. Attribute may be missing, then suggest that separator = ";"-->
        <multiList sorted="" separator="">
          <!--List item-->
          <!--value - flag value. Attribute may be missing, then suggest that value = 0-->
          <!--displayValue - value in state displayed to user. Attribute may be missing, then suggest that displayValue = value-->
          <listItem value="" displayValue=""/>
        </multiList>

        <!--Setting is a list, where list is obtained by sql-query, in which the multiple choice of elements is possible. Makes sense only for string type-->
        <!--sorted - whether or not to take into account the order, in which user choosed elements. Valid values: True, 1, False, 0. Attribute may be missing, then suggest that sorted = "False"-->
        <!--separator - key separator in the result string. Attribute may be missing, then suggest that separator = ";"-->
        <!--query - request, after which you can get a list of two fields in the line. Attribute can't be null-->
        <!--valueFieldName - name of the field from which to take values ​​for the keys of list items. Attribute may be missing, then suggest that valueFieldName = "value"-->
        <!--displayValueFieldName - name of the field from which to take values ​​for display in the list. Attribute may be missing, then suggest that displayValueFieldName = "displayValue"-->
        <sqlMultiList sorted="" separator="" query="" valueFieldName="" displayValueFieldName=""/>
        
        <!--Optional tag, which can provide additional remarks, that you need to try to take into account the display side at the setting level-->
        <suggestions>
          <!--Minimum length of field-->
          <!--value - minimum length of field. Positive integer of type UInt16. Can't be null-->
          <minLength value=""/>
          <!--Maximum length of field-->
          <!--value - maximum length of field. Positive integer of type UInt16. Can't be null-->
          <maxLength value=""/>
          <!--The assumption that the field should be multi-line-->
          <multiline/>
          <!--Minimum number of lines in multi-line field-->
          <!--value - number of lines. Positive integer of type Byte. Can't be null-->
          <minLines value=""/>
          <!--Maximum number of lines in multi-line field-->
          <!--value - number of lines. Positive integer of type Byte. Can't be null-->
          <maxLines value=""/>
          <!--Regular expression to check the correctness of the entered value-->
          <!--value - regular expression, which will be applied to the string representation of the field type. String. Can't be null-->
          <!--validation - text, that should be implemented into validation for user, if value fails the test. String. Attribute may be missing, then suggest that validation = null-->
          <regex value="" validation=""/>
          <!--Should notify those settings, which have suggestion notifiable changing setting value-->
          <notifyOnChange/>
          <!--Should notify that settings about fact of changing value with suggestion notifyOnChange. Setting should get: link to the changed setting-->
          <notifiable/>
        </suggestions>
      </option>
    
    </optionGroup>
  </optionGroups>
  
</referenceOptions>