<?xml version="1.0" encoding="utf-8"?>
<optionSet version="1" xmlns="http://tempuri.org" xmlns:xsi="http://tempuri.org/2018/Option/XMLSchema-instance" xsi:schemaLocation="http://tempuri.org OptionSetV1.xsd">
  <option name="name1" displayName="displayName1" description="description1" defaultValue="defaultValue1" valueType="valueType1">

    <!--If you need to set a DefaultValue, but it can't be placed in the attribute, it can be set through the node. Either an attribute or node may be present.-->
    <defaultValue><![CDATA[]]></defaultValue>

    <!--Setting is range-->
    <!--min - minimum setting value. Attribute may be missing, then suggest that minimum value equals default(T)-->
    <!--max - maximum setting value. Attribute may be missing, then suggest that maximum value equals default(T)-->
    <rangedMinMax min="{Constant name=min}" max="{Constant name=max}"/>

    <!--Setting is range, which has no bottom limit-->
    <!--max - maximum setting value. Attribute may be missing, then suggest that maximum value equals default(T)-->
    <rangedMax max=""/>

    <!--Setting is range, which has no top limit-->
    <!--min - minimum setting value. Attribute may be missing, then suggest that minimum value equals default(T)-->
    <rangedMin min="" />

    <!--Setting is a selectable value from the list-->
    <fixedList>
      <!--List item-->
      <!--value - item value. Attribute may be missing, then suggest that value = null-->
      <!--displayValue - value in state displayed to user. Attribute may be missing, then suggest that displayValue = value-->
      <listItem value="" displayValue=""/>
    </fixedList>

    <!--Setting is a selectable value from the list, where list is obtained by sql-query-->
    <!--query - request, after which you can get a list of two fields in the line. Attribute can't be null-->
    <!--valueFieldName - name of the field from which to take values ​​for the keys of list items. Attribute may be missing, then suggest that valueFieldName = "value"-->
    <!--displayValueFieldName - name of the field from which to take values ​​for display in the list. Attribute may be missing, then suggest that displayValueFieldName = "displayValue"-->
    <sqlFixedList query="" valueFieldName="" displayValueFieldName=""/>
    
    <!--Setting is a selectable set of flags from the list, where list is formed by powers of two, and choice result is a flag final value, that is a combination of chosen flags. Makes sense only for numeric types-->
    <flagList>
      <!--List item-->
      <!--value - flag value. Attribute may be missing, then suggest that value = 0-->
      <!--displayValue - value in state displayed to user. Attribute may be missing, then suggest that displayValue = value-->
      <listItem value="" displayValue=""/>
    </flagList>

    <!--Setting is a selectable set of flags from the list, where list is obtained by sql-query and formed by powers of two, and choice result is a flag final value, that is a combination of chosen flags. Makes sense only for numeric types-->
    <!--query - request, after which you can get a list of two fields in the line. Attribute can't be null-->
    <!--valueFieldName - name of the field from which to take values ​​for the keys of list items. Attribute may be missing, then suggest that valueFieldName = "value"-->
    <!--displayValueFieldName - name of the field from which to take values ​​for display in the list. Attribute may be missing, then suggest that displayValueFieldName = "displayValue"-->
    <sqlFlagList query="" valueFieldName="" displayValueFieldName=""/>

    <!--Setting is a list, in which the multiple choice of elements is possible. Makes sense only for string type-->
    <!--sorted - whether or not to take into account the order, in which user choosed elements. Valid values: True, 1, False, 0. Attribute may be missing, then suggest that sorted = "False"-->
    <!--separator - key separator in the result string. Attribute may be missing, then suggest that separator = ";"-->
    <multiList sorted="" separator="">
      <!--List item-->
      <!--value - flag value. Attribute may be missing, then suggest that value = 0-->
      <!--displayValue - value in state displayed to user. Attribute may be missing, then suggest that displayValue = value-->
      <listItem value="" displayValue=""/>
    </multiList>
    
    <!--Setting is a list, where list is obtained by sql-query, in which the multiple choice of elements is possible. Makes sense only for string type-->
    <!--sorted - whether or not to take into account the order, in which user choosed elements. Valid values: True, 1, False, 0. Attribute may be missing, then suggest that sorted = "False"-->
    <!--separator - key separator in the result string. Attribute may be missing, then suggest that separator = ";"-->
    <!--query - request, after which you can get a list of two fields in the line. Attribute can't be null-->
    <!--valueFieldName - name of the field from which to take values ​​for the keys of list items. Attribute may be missing, then suggest that valueFieldName = "value"-->
    <!--displayValueFieldName - name of the field from which to take values ​​for display in the list. Attribute may be missing, then suggest that displayValueFieldName = "displayValue"-->
    <sqlMultiList sorted="" separator="" query="" valueFieldName="" displayValueFieldName=""/>
  </option>

  <!--May be 0..*-->
  <group name="name1" displayName="displayName1" description="description1">
    <!--May be 0..*-->
    <option name="name3">
      <!--May be 0..*-->
      <suggestion name="name6"/>
      <suggestion name="name5"/>
    </option>
    <!--May be 0..*-->
    <group name="name2" displayName="displayName2" description="{Constant name=name1}, {Constant name=name2}">
      <option name="name4"/>
      <option name="name5"/>
    </group>
  </group>

  <!--May be 0..*-->
  <constant name="name" value="value" valueType="valueType1"/>
  <constant name="max" value="255" valueType="valueType1"/>
  <constant name="min" value="5" valueType="valueType1"/>

  <!--May be 0..*-->
  <suggestion name="name6">
    <!--Minimum length of field-->
    <!--value - minimum length of field. Positive integer of type UInt16. Can't be null-->
    <minLength value="{Constant name=nameofConstant}"/>
    <!--Maximum length of field-->
    <!--value - maximum length of field. Positive integer of type UInt16. Can't be null-->
    <maxLength value=""/>
    <!--The assumption that the field should be multi-line-->
    <multiline/>
    <!--Minimum number of lines in multi-line field-->
    <!--value - number of lines. Positive integer of type Byte. Can't be null-->
    <minLines value=""/>
    <!--Maximum number of lines in multi-line field-->
    <!--value - number of lines. Positive integer of type Byte. Can't be null-->
    <maxLines value=""/>
    <!--Regular expression to check the correctness of the entered value-->
    <!--value - regular expression, which will be applied to the string representation of the field type. String. Can't be null-->
    <!--validation - text, that should be implemented into validation for user, if value fails the test. String. Attribute may be missing, then suggest that validation = null-->
    <regex value="" validation=""/>
    <!--Should notify those settings, which have suggestion notifiable changing setting value-->
    <notifyOnChange/>
    <!--Should notify that settings about fact of changing value with suggestion notifyOnChange. Setting should get: link to the changed setting-->
    <notifiable/>
    <control name="nameOfControl" />
  </suggestion>

</optionSet>
